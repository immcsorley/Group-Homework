--- This code is used to scrape paragraphs from wikipedias websites on the following firms: IBM, Google, Microsoft, and Facebook. 
    It returns the top 20 words used in the paragraphs of each firm
---


from bs4 import BeautifulSoup
import requests
import re
#re is what i used to take out the footnotes 

def remove_punc(words):
    for i in range(len(words)):
        words[i] = words[i].replace(',','')
        words[i] = words[i].replace('.','')
        words[i] = words[i].replace(';','')
        words[i] = words[i].replace(':','')
        words[i] = words[i].replace('(','')
        words[i] = words[i].replace(')','')
        words[i] = words[i].replace('"','')
    return words 

def doc_to_frequencies(doc):
    word_freq = {}
    stop_words = [ 'facebook', 'ibm', 'microsoft', 'google', '2018', '2019', 'ceo', 'one', 'used' 'firm', 'company', 'us', 'billion', 'announced', 'can', 'new', 'also', 'first', 'great', 'a', 'about', 'above', 'after', 'again', 'against', 'all', 'am', 'an', 'and', 'any', 'are', "aren't", 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below', 'between', 'both', 'but', 'by', "can't", 'cannot', 'could', "couldn't", 'did', "didn't", 'do', 'does', "doesn't", 'doing', "don't", 'down', 'during', 'each', 'few', 'for', 'from', 'further', 'had', "hadn't", 'has', "hasn't", 'have', "haven't", 'having', 'he', "he'd", "he'll", "he's", 'her', 'here', "here's", 'hers', 'herself', 'him', 'himself', 'his', 'how', "how's", 'i', "i'd", "i'll", "i'm", "i've", 'if', 'in', 'into', 'is', "isn't", 'it', "it's", 'its', 'itself', "let's", 'me', 'more', 'most', "mustn't", 'my', 'myself', 'no', 'nor', 'not', 'of', 'off', 'on', 'once', 'only', 'or', 'other', 'ought', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'same', "shan't", 'she', "she'd", "she'll", "she's", 'should', "shouldn't", 'so', 'some', 'such', 'than', 'that', "that's", 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', "there's", 'these', 'they', "they'd", "they'll", "they're", "they've", 'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', "wasn't", 'we', "we'd", "we'll", "we're", "we've", 'were', "weren't", 'what', "what's", 'when', "when's", 'where', "where's", 'which', 'while', 'who', "who's", 'whom', 'why', "why's", 'with', "won't", 'would', "wouldn't", 'you', "you'd", "you'll", "you're", "you've", 'your', 'yours', 'yourself', 'yourselves'] 
    for word in doc:
        if word in stop_words:
            continue
        if word in word_freq:
            word_freq[word] += 1
        else:
            word_freq[word] = 1
    return word_freq

def top_k(freqs, k):
    top = []
    for i in range(k):
        mfreq = 0
        mkey = ''
        for key in freqs:
            if mfreq < freqs[key]:
                mfreq = freqs[key]
                mkey = key
        top.append([mkey, mfreq])
        del(freqs[mkey]) 
    return top

def wiki (firm_name):
    text = ' '
    firm_name = firm_name
    url = f"https://en.wikipedia.org/wiki/{firm_name}"
    response = requests.get(url)
    html_doc = response.text
    soup = BeautifulSoup(html_doc, "lxml")
    
    text = ''
    for paragraph in soup.find_all('p'):
        text += paragraph.text 
   
    # Cleaning text (taking out footnotes ect.)
    text = re.sub(r'\[.*?\]+', '', text)
    text = text.replace('\n', '')
    text = text.lower()
    words = text.split()
    words = remove_punc(words)
    freqs = doc_to_frequencies(words) 
    top_words = top_k(freqs, 20)

    return(top_words)
print('Facebooks top words:\n ', wiki("facebook"))

print('\n IBMs top words: \n ', wiki("ibm"))

print('\n Microsofts top words: \n ', wiki("microsoft"))

print('\n Google top words: \n ', wiki("google"))
